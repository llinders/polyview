from typing import List, Annotated, Dict, TypedDict

from langchain_core.messages import BaseMessage
from langgraph.graph import add_messages
from pydantic import BaseModel


class RawArticle(BaseModel):
    """Represents a single scraped article."""
    id: int
    url: str
    content: str

class ExtractedPerspective(BaseModel):
    """Represents a single perspective found within an article."""
    source_article_id: int
    perspective_summary: str
    key_arguments: List[str]

class ConsolidatedPerspective(BaseModel):
    """Represents a final, clustered perspective with aggregated arguments."""
    arguments: List[str]

class FinalPerspective(BaseModel):
    """The final, detailed analysis of a single perspective."""
    narrative: str
    core_arguments: List[str]
    common_assumptions: List[str]
    strengths: List[str]
    weaknesses: List[str]


class State(TypedDict):
    messages: Annotated[List[BaseMessage], add_messages]
    topic: str

    search_queries: List[str] # TODO: potentially remove, since search queries can be generated by search agent
    raw_articles: List[RawArticle]
    extracted_perspectives: List[ExtractedPerspective]
    consolidated_perspectives: Dict[str, ConsolidatedPerspective]

    identified_perspectives: Dict[str, FinalPerspective]
    summary: str

    iteration: int
    missing_perspectives: List[dict] # TODO: remove or change to List[str]
