from typing import Annotated, TypedDict

from langchain_core.messages import BaseMessage
from langgraph.graph import add_messages
from pydantic import BaseModel, Field


class RawArticle(BaseModel):
    """Represents a single scraped article."""

    id: str
    url: str
    content: str


class ExtractedPerspective(BaseModel):
    """Represents a single perspective found within an article."""

    perspective_summary: str = Field(
        description="A short descriptive name for the perspective (e.g., 'Scientific Consensus', 'Techno-Optimist', "
        "'Skeptical/Contrarian', 'Justice-Oriented', 'Economic Impact Concerns', 'Geopolitical Risks', "
        "'Conservative', 'Liberal', etc.)"
    )
    key_arguments: list[str] = Field(
        description="A list of the main claims, rationales, or evidence supporting this perspective, as described in the article."
    )
    contextual_narrative: str = Field(
        description="A paragraph describing the perspective's story as told by this specific article, capturing its framing and tone."
    )
    source_article_summary: str = Field(
        description="A summary of the source article (max 8 sentences) to differentiate between articles *about* a perspective vs. articles *advocating for* it."
    )
    inferred_assumptions: list[str] = Field(
        description="A list of assumptions the LLM infers from the text that this perspective relies on."
    )
    evidence_provided: list[str] = Field(
        description="A list of specific pieces of evidence (e.g., stats, quotes, events) the article uses to support the arguments."
    )


class ArticlePerspectives(BaseModel):
    """A collection of extracted perspectives for a single article."""

    source_article_id: str
    perspectives: list[ExtractedPerspective]


class ConsolidatedPerspective(BaseModel):
    """
    Represents a final, clustered perspective with aggregated arguments of all articles.
    The summary serves as the name/identifier for this consolidated perspective.
    """

    perspective_name: str = Field(
        description="A short descriptive name for the perspective (e.g., 'Scientific Consensus', 'Techno-Optimist', "
        "'Skeptical/Contrarian', 'Justice-Oriented', 'Economic Impact Concerns', 'Geopolitical Risks', "
        "'Conservative', 'Liberal', etc.)"
    )
    aggregated_arguments: list[str] = Field(
        description="The combined list of all key arguments from the clustered perspectives."
    )
    aggregated_narratives: list[str] = Field(
        description="A list of all the contextual narrative strings from the clustered perspectives."
    )
    supporting_evidence: list[str] = Field(
        description="A combined list of all the evidence provided from the clustered perspectives."
    )
    preliminary_synthesis: str = Field(
        description="A draft narrative generated by the clustering node based on the aggregated narratives, serving as a starting point for the final synthesis."
    )


class FinalPerspective(BaseModel):
    """
    The final, detailed analysis of a single perspective about the topic.
    This perspective is synthesized based on the aggregated arguments for the consolidated perspectives.
    """

    perspective_name: str = Field(
        description="A short descriptive name for the perspective (e.g., 'Supporters', 'Opposition', 'Scientific Consensus', 'Techno-Optimist', "
        "'Skeptical/Contrarian', 'Justice-Oriented', 'Conservative', 'Liberal', etc.)"
    )
    narrative: str = Field(
        description="A detailed, neutral, and comprehensive analysis of the perspective."
    )
    core_arguments: list[str] = Field(
        description="A list of the main claims, rationales, or evidence supporting this perspective, as described in the article."
    )
    supporting_evidence: list[str] = Field(
        description="A list of specific pieces of evidence (e.g., stats, quotes, events) the article uses to support the arguments."
    )
    common_assumptions: list[str] = Field(
        description="A list of assumptions the perspective relies on (e.g. 'poor people are lazy', 'people are inherently bad')."
    )
    strengths: list[str] = Field(
        description="An analysis of strengths of the perspective and it's argumentation (e.g., well-supported by evidence, logically consistent.)"
    )
    weaknesses: list[str] = Field(
        description="An analysis of weaknesses of the perspective and it's argumentation (e.g., relies on unstated assumptions, lacks evidence for key claims)"
    )


class State(TypedDict):
    messages: Annotated[list[BaseMessage], add_messages]
    topic: str

    raw_articles: list[RawArticle]
    article_perspectives: list[ArticlePerspectives]
    consolidated_perspectives: list[ConsolidatedPerspective]

    final_perspectives: list[FinalPerspective]
    summary: str

    iteration: int
    missing_perspectives: list[dict]  # TODO: remove or change to List[str]
